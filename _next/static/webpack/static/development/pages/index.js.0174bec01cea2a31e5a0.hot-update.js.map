{"version":3,"file":"static/webpack/static/development/pages/index.js.0174bec01cea2a31e5a0.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { useEffect, useLayoutEffect, useState } from 'react'\n\nimport UserGrid from '../src/components/UserGrid'\nimport Pagination from '../src/components/Pagination'\nimport Portal from '../src/components/Portal'\nimport ProfileCard from '../src/components/ProfileCard'\n\nimport { useSelector, useDispatch, useStore } from 'react-redux'\nimport { getUsers, getUserProfile } from '../src/network/github'\n\nimport { addUsers } from '../src/modules/users'\nimport { setPage } from '../src/modules/page'\nimport { showModal, hideModal } from '../src/modules/modal'\nimport Overlay from '../src/components/Overlay'\n\n\nconst App = () => {\n  const users = useSelector(state => state.users)\n  const page = useSelector(state => state.page)\n  const modal = useSelector(state => state.modal)\n  const dispatch = useDispatch()\n\n  const displyNum = 20\n  const pageCount = Math.ceil(users.length / displyNum)\n  const currentPageUsers = users.slice((page - 1) * displyNum, page * displyNum)\n\n  const [userProfile, setUserProfile] = useState({})\n\n  useEffect(() => {\n    // init data with 100 users\n    (async function () {\n      const options = { per_page: 100 }\n      let users = await getUsers({ since: 0, ...options })\n      users = users.map(user => ({ id: user.id, username: user.login, headUrl: user.avatar_url, badge: user.site_admin }))\n      dispatch(addUsers(users))\n    })();\n  }, [])\n\n\n  const pageChangeHandler = (nextPage) => {\n    dispatch(setPage(nextPage))\n  }\n\n  const onOverlayClick = () => {\n    dispatch(hideModal())\n  }\n\n  const userClickHandler = (user) => {\n    (async function () {\n      let profile = await getUserProfile({ username: user.username })\n      profile = { ...user, location: profile.location, bio: profile.bio, blog: profile.blog }\n      dispatch(showModal())\n      setUserProfile(profile)\n    })();\n  }\n\n  return (\n    <>\n      <UserGrid users={currentPageUsers} onUserClick={userClickHandler} />\n      <div css={`margin: auto;`}>\n        <Pagination\n          page={page} pageCount={pageCount} onPageChange={pageChangeHandler}\n          css={`display: inline;`} />\n        <div css={`display: inline;`}>{`${users.length} loaded`}</div>\n      </div>\n      {modal.show\n        ? <Portal selector='#modal'>\n          <Overlay\n            onClick={onOverlayClick}\n            css={`display: flex; justify-content: center; align-items: center;`}>\n            <ProfileCard\n              onClick={e => { e.stopPropagation() }}\n              profile={userProfile} />\n          </Overlay>\n        </Portal>\n        : null\n      }\n    </>\n  )\n}\n\n\nexport default App\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AATA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AAEA;AAAA;AACA;AAHA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAEA;;;;A","sourceRoot":""}